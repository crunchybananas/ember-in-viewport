{"version":3,"file":"observer-admin.js","sources":["../../src/-private/observer-admin.js"],"sourcesContent":["import IntersectionObserverAdmin from 'intersection-observer-admin';\n\n/**\n * Static administrator to ensure use one IntersectionObserver per combination of root + observerOptions\n * Use `root` (viewport) as lookup property and weakly referenced\n * `root` will have many keys with each value being and object containing one IntersectionObserver instance and all the elements to observe\n * Provided callbacks will ensure consumer of this service is able to react to enter or exit of intersection observer\n * This provides important optimizations since we are not instantiating a new IntersectionObserver instance for every element and\n * instead reusing the instance.\n *\n * @class ObserverAdmin\n */\nexport default class ObserverAdmin {\n  /** @private **/\n  constructor() {\n    this.instance = new IntersectionObserverAdmin();\n  }\n\n  /**\n   * @method add\n   * @param HTMLElement element\n   * @param Object observerOptions\n   * @param Function enterCallback\n   * @param Function exitCallback\n   * @void\n   */\n  add(element, observerOptions, enterCallback, exitCallback) {\n    if (enterCallback) {\n      this.addEnterCallback(element, enterCallback);\n    }\n    if (exitCallback) {\n      this.addExitCallback(element, exitCallback);\n    }\n\n    return this.instance.observe(element, observerOptions);\n  }\n\n  addEnterCallback(element, enterCallback) {\n    this.instance.addEnterCallback(element, enterCallback);\n  }\n\n  addExitCallback(element, exitCallback) {\n    this.instance.addExitCallback(element, exitCallback);\n  }\n\n  /**\n   * This method takes a target element, observerOptions and a the scrollable area.\n   * The latter two act as unique identifiers to figure out which intersection observer instance\n   * needs to be used to call `unobserve`\n   *\n   * @method unobserve\n   * @param HTMLElement target\n   * @param Object observerOptions\n   * @param String scrollableArea\n   * @void\n   */\n  unobserve(...args) {\n    this.instance.unobserve(...args);\n  }\n\n  destroy(...args) {\n    this.instance.destroy(...args);\n  }\n}\n"],"names":["ObserverAdmin","constructor","instance","IntersectionObserverAdmin","add","element","observerOptions","enterCallback","exitCallback","addEnterCallback","addExitCallback","observe","unobserve","args","destroy"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,aAAa,CAAC;AACjC;AACAC,EAAAA,WAAWA,GAAG;AACZ,IAAA,IAAI,CAACC,QAAQ,GAAG,IAAIC,yBAAyB,EAAE,CAAA;AACjD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,GAAGA,CAACC,OAAO,EAAEC,eAAe,EAAEC,aAAa,EAAEC,YAAY,EAAE;AACzD,IAAA,IAAID,aAAa,EAAE;AACjB,MAAA,IAAI,CAACE,gBAAgB,CAACJ,OAAO,EAAEE,aAAa,CAAC,CAAA;AAC/C,KAAA;AACA,IAAA,IAAIC,YAAY,EAAE;AAChB,MAAA,IAAI,CAACE,eAAe,CAACL,OAAO,EAAEG,YAAY,CAAC,CAAA;AAC7C,KAAA;IAEA,OAAO,IAAI,CAACN,QAAQ,CAACS,OAAO,CAACN,OAAO,EAAEC,eAAe,CAAC,CAAA;AACxD,GAAA;AAEAG,EAAAA,gBAAgBA,CAACJ,OAAO,EAAEE,aAAa,EAAE;IACvC,IAAI,CAACL,QAAQ,CAACO,gBAAgB,CAACJ,OAAO,EAAEE,aAAa,CAAC,CAAA;AACxD,GAAA;AAEAG,EAAAA,eAAeA,CAACL,OAAO,EAAEG,YAAY,EAAE;IACrC,IAAI,CAACN,QAAQ,CAACQ,eAAe,CAACL,OAAO,EAAEG,YAAY,CAAC,CAAA;AACtD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,SAASA,CAAC,GAAGC,IAAI,EAAE;AACjB,IAAA,IAAI,CAACX,QAAQ,CAACU,SAAS,CAAC,GAAGC,IAAI,CAAC,CAAA;AAClC,GAAA;EAEAC,OAAOA,CAAC,GAAGD,IAAI,EAAE;AACf,IAAA,IAAI,CAACX,QAAQ,CAACY,OAAO,CAAC,GAAGD,IAAI,CAAC,CAAA;AAChC,GAAA;AACF;;;;"}